Maahir Vohra CS288

Problem 1:
For problem 1, I first echo'd the greeting and rules. Then I asked for user input (rock, paper, scissors). Then, for
player 2 I knew to use modulus 3 and use a switch case to assign 0, 1, and 2 to rock, paper, and scissors. After that, 
I had both players choices. I then was going to use a switch case again for each possible combination. But then I 
realized that I needed a loop so that if its a tie I can have a boolean value that'll keep it running until its not a tie. 
So, I created a while loop and a "boolean" is_tie set to 0 for true. I looped through until it wasn't a tie, I'd print 
out the winner, and then set is_tie to 1. I could have used a break statement but I wanted the code to be clear. 
As for determining the winner, I just wrote out the combinations and then created if statements to determine the 
winner by comparing the string value for player 1 and player 2. Lastly, I just turned all the code before the while loop
besides the greeting into a function so that I could call it from the while loop.

Problem 2: ------------------------------------------------------------
So to start off, I set the first argument to the user input variable. Then, I checked if $1 was zero/empty. If it was, 
I would do a simple user input and assign it to the user input variable. Next, I checked if the input was a file or a 
directory. This is easy with the -f and -d flags. This if statement would soon be filled with basically all the logic. 
I start first with the if it was a file because it looked easier. I checked if the user had read permission which is easy 
with the -r flag. If the user didn't have read, I would print a warning and exit with a status of 1. If not, then I would 
continue with the logic. Checking word count, line count, and char count is easy with the wc + flags. I used the "<" 
because I didn't like how when it showed the counts, it printed out the file name with it. I found out about this using
google. Then a simple if elif using the character count. I'm not entirely sure what the point of getting the word and line 
count is, because its not used at all. So, I just printed it out.

For Directories, I again used the appropriate flags to check if the have r and x permissions. I counted the number of files 
and subdirectories in it using grep (or grep -E). I took 288 before with Itani and he made us use egrep so I'm continuing 
with using egrep. I know we didn't learn it yet but I already know it from 288 last semester. I used ls -l and piped that into 
the egrep. I looked for a pattern I could use and decided on using ^ for begenning of the line, and - for files and d for 
directories. Lastly, I wasn't entirely sure how to approach it because I could have just done ls -lh and called it a day. 
But, I didn't like it like that. So I used my previous 288 knowledge and used a for loop. In the for loop it loops over every 
item basically. Whether its a file or directory. Then, I had to loop up how to get the size of said object. I came across 
the stat and -c%s flag. This gave me excatly what I needed. Then, I checked if "object" was a directory or a file and 
printed out the name of the object (using basename) and the size. This looks a lot better than using ls -lh.

Problem 3: ------------------------------------------------------------
